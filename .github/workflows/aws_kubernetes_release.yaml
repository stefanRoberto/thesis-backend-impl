name: AWS EKS Release Workflow

on:
  push:
    branches:
      - main

jobs:
  push-image-to-ecr:
    runs-on: ubuntu-latest
    environment: Production
    env:
      IMAGE_TAG: prod-${{ github.sha }}
    outputs:
      ecr-image-tag: ${{ steps.output-image-tag.outputs.ECR_IMAGE_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials and setup Terraform
        uses: ./.github/actions/aws_terraform_setup
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Check if ECR repository exists
        working-directory: terraform/container-registry
        run: |
          terraform init
          terraform apply -auto-approve
          echo ECR_REPOSITORY_NAME=$(terraform output -raw ecr_repository_name) >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create and use a new builder instance
        env:
          BUILDER_NAME: builder-instance
        run: |
          docker buildx create --name $BUILDER_NAME --use
          echo BUILDER_NAME=$BUILDER_NAME >> $GITHUB_ENV

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY_NAME }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          builder: ${{ env.BUILDER_NAME }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:cache
          cache-to: type=registry,mode=max,image-manifest=true,oci-mediatypes=true,ref=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:cache

      - name: Output the ECR image tag
        id: output-image-tag
        run: |
          echo ECR_IMAGE_TAG=$IMAGE_TAG >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: push-image-to-ecr
    environment: Production
    env:
      TF_VAR_DB_USERNAME: ${{ vars.DB_USERNAME }}
      TF_VAR_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      TF_VAR_DB_NAME: ${{ vars.DB_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials and setup Terraform
        uses: ./.github/actions/aws_terraform_setup
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Check if EKS cluster exists
        working-directory: terraform/kubernetes-cluster
        run: |
          terraform init
          terraform apply -auto-approve

      - name: Deploy new version to Amazon EKS cluster
        env:
          TF_VAR_IMAGE_TAG: ${{ needs.push-image-to-ecr.outputs.ecr-image-tag }}
          TF_VAR_ACME_SERVER: ${{ vars.ACME_SERVER }}
        working-directory: terraform/fastapi-deployment
        run: |
          terraform init
          terraform apply -auto-approve
